<?php
/**
 * AccountUserApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WPEngineGenerated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WP Engine API
 *
 * The API described in this document is subject to change.
 *
 * The version of the OpenAPI document: 1.6.7
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WPEngineGenerated\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WPEngineGenerated\ApiException;
use WPEngineGenerated\Configuration;
use WPEngineGenerated\HeaderSelector;
use WPEngineGenerated\ObjectSerializer;

/**
 * AccountUserApi Class Doc Comment
 *
 * @category Class
 * @package  WPEngineGenerated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AccountUserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createAccountUser' => [
            'application/json',
        ],
        'deleteAccountUser' => [
            'application/json',
        ],
        'getAccountUser' => [
            'application/json',
        ],
        'listAccountUsers' => [
            'application/json',
        ],
        'updateAccountUser' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createAccountUser
     *
     * Create a new account user
     *
     * @param  string $accountId ID of account (required)
     * @param  \WPEngineGenerated\Model\CreateAccountUserRequest $body ##### Properties * user - **required** - The user that will be created   * account_id - **required** - The ID of the account that the account_user will belong to   * first_name - **required** - The first name of the user   * last_name - **required** - The last name of the user   * email - **required** - The email of the user   * roles -- **required** - The roles the user is allowed. The following roles are valid     * owner     * full     * full,billing     * partial     * partial,billing   * install_ids - **optional** - Used with partial role selection. The ids of the installs the user will have access to. (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountUser'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\CreateAccountUser201Response|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse
     */
    public function createAccountUser($accountId, $body, $authorization = null, string $contentType = self::contentTypes['createAccountUser'][0])
    {
        list($response) = $this->createAccountUserWithHttpInfo($accountId, $body, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation createAccountUserWithHttpInfo
     *
     * Create a new account user
     *
     * @param  string $accountId ID of account (required)
     * @param  \WPEngineGenerated\Model\CreateAccountUserRequest $body ##### Properties * user - **required** - The user that will be created   * account_id - **required** - The ID of the account that the account_user will belong to   * first_name - **required** - The first name of the user   * last_name - **required** - The last name of the user   * email - **required** - The email of the user   * roles -- **required** - The roles the user is allowed. The following roles are valid     * owner     * full     * full,billing     * partial     * partial,billing   * install_ids - **optional** - Used with partial role selection. The ids of the installs the user will have access to. (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountUser'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\CreateAccountUser201Response|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createAccountUserWithHttpInfo($accountId, $body, $authorization = null, string $contentType = self::contentTypes['createAccountUser'][0])
    {
        $request = $this->createAccountUserRequest($accountId, $body, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\WPEngineGenerated\Model\CreateAccountUser201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\CreateAccountUser201Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\CreateAccountUser201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WPEngineGenerated\Model\BadRequestErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\BadRequestErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\BadRequestErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ForbiddenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\CreateAccountUser201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\CreateAccountUser201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\BadRequestErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createAccountUserAsync
     *
     * Create a new account user
     *
     * @param  string $accountId ID of account (required)
     * @param  \WPEngineGenerated\Model\CreateAccountUserRequest $body ##### Properties * user - **required** - The user that will be created   * account_id - **required** - The ID of the account that the account_user will belong to   * first_name - **required** - The first name of the user   * last_name - **required** - The last name of the user   * email - **required** - The email of the user   * roles -- **required** - The roles the user is allowed. The following roles are valid     * owner     * full     * full,billing     * partial     * partial,billing   * install_ids - **optional** - Used with partial role selection. The ids of the installs the user will have access to. (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountUserAsync($accountId, $body, $authorization = null, string $contentType = self::contentTypes['createAccountUser'][0])
    {
        return $this->createAccountUserAsyncWithHttpInfo($accountId, $body, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createAccountUserAsyncWithHttpInfo
     *
     * Create a new account user
     *
     * @param  string $accountId ID of account (required)
     * @param  \WPEngineGenerated\Model\CreateAccountUserRequest $body ##### Properties * user - **required** - The user that will be created   * account_id - **required** - The ID of the account that the account_user will belong to   * first_name - **required** - The first name of the user   * last_name - **required** - The last name of the user   * email - **required** - The email of the user   * roles -- **required** - The roles the user is allowed. The following roles are valid     * owner     * full     * full,billing     * partial     * partial,billing   * install_ids - **optional** - Used with partial role selection. The ids of the installs the user will have access to. (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createAccountUserAsyncWithHttpInfo($accountId, $body, $authorization = null, string $contentType = self::contentTypes['createAccountUser'][0])
    {
        $returnType = '\WPEngineGenerated\Model\CreateAccountUser201Response';
        $request = $this->createAccountUserRequest($accountId, $body, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createAccountUser'
     *
     * @param  string $accountId ID of account (required)
     * @param  \WPEngineGenerated\Model\CreateAccountUserRequest $body ##### Properties * user - **required** - The user that will be created   * account_id - **required** - The ID of the account that the account_user will belong to   * first_name - **required** - The first name of the user   * last_name - **required** - The last name of the user   * email - **required** - The email of the user   * roles -- **required** - The roles the user is allowed. The following roles are valid     * owner     * full     * full,billing     * partial     * partial,billing   * install_ids - **optional** - Used with partial role selection. The ids of the installs the user will have access to. (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createAccountUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createAccountUserRequest($accountId, $body, $authorization = null, string $contentType = self::contentTypes['createAccountUser'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling createAccountUser'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createAccountUser'
            );
        }



        $resourcePath = '/accounts/{account_id}/account_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteAccountUser
     *
     * Delete an account user
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountUser'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteAccountUser($accountId, $userId, $authorization = null, string $contentType = self::contentTypes['deleteAccountUser'][0])
    {
        $this->deleteAccountUserWithHttpInfo($accountId, $userId, $authorization, $contentType);
    }

    /**
     * Operation deleteAccountUserWithHttpInfo
     *
     * Delete an account user
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountUser'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteAccountUserWithHttpInfo($accountId, $userId, $authorization = null, string $contentType = self::contentTypes['deleteAccountUser'][0])
    {
        $request = $this->deleteAccountUserRequest($accountId, $userId, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\BadRequestErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\NotFoundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteAccountUserAsync
     *
     * Delete an account user
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountUserAsync($accountId, $userId, $authorization = null, string $contentType = self::contentTypes['deleteAccountUser'][0])
    {
        return $this->deleteAccountUserAsyncWithHttpInfo($accountId, $userId, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteAccountUserAsyncWithHttpInfo
     *
     * Delete an account user
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteAccountUserAsyncWithHttpInfo($accountId, $userId, $authorization = null, string $contentType = self::contentTypes['deleteAccountUser'][0])
    {
        $returnType = '';
        $request = $this->deleteAccountUserRequest($accountId, $userId, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteAccountUser'
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteAccountUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteAccountUserRequest($accountId, $userId, $authorization = null, string $contentType = self::contentTypes['deleteAccountUser'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling deleteAccountUser'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling deleteAccountUser'
            );
        }



        $resourcePath = '/accounts/{account_id}/account_users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountUser
     *
     * Get an account user by ID
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountUser'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\AccountUser|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse
     */
    public function getAccountUser($accountId, $userId, $authorization = null, string $contentType = self::contentTypes['getAccountUser'][0])
    {
        list($response) = $this->getAccountUserWithHttpInfo($accountId, $userId, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation getAccountUserWithHttpInfo
     *
     * Get an account user by ID
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountUser'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\AccountUser|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountUserWithHttpInfo($accountId, $userId, $authorization = null, string $contentType = self::contentTypes['getAccountUser'][0])
    {
        $request = $this->getAccountUserRequest($accountId, $userId, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WPEngineGenerated\Model\AccountUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AccountUser' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AccountUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ForbiddenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WPEngineGenerated\Model\NotFoundErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\NotFoundErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\NotFoundErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\AccountUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AccountUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\NotFoundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountUserAsync
     *
     * Get an account user by ID
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountUserAsync($accountId, $userId, $authorization = null, string $contentType = self::contentTypes['getAccountUser'][0])
    {
        return $this->getAccountUserAsyncWithHttpInfo($accountId, $userId, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountUserAsyncWithHttpInfo
     *
     * Get an account user by ID
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountUserAsyncWithHttpInfo($accountId, $userId, $authorization = null, string $contentType = self::contentTypes['getAccountUser'][0])
    {
        $returnType = '\WPEngineGenerated\Model\AccountUser';
        $request = $this->getAccountUserRequest($accountId, $userId, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountUser'
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getAccountUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getAccountUserRequest($accountId, $userId, $authorization = null, string $contentType = self::contentTypes['getAccountUser'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling getAccountUser'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling getAccountUser'
            );
        }



        $resourcePath = '/accounts/{account_id}/account_users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listAccountUsers
     *
     * List your account users
     *
     * @param  string $accountId ID of account (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccountUsers'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\ListAccountUsers200Response|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse
     */
    public function listAccountUsers($accountId, $authorization = null, string $contentType = self::contentTypes['listAccountUsers'][0])
    {
        list($response) = $this->listAccountUsersWithHttpInfo($accountId, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation listAccountUsersWithHttpInfo
     *
     * List your account users
     *
     * @param  string $accountId ID of account (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccountUsers'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\ListAccountUsers200Response|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listAccountUsersWithHttpInfo($accountId, $authorization = null, string $contentType = self::contentTypes['listAccountUsers'][0])
    {
        $request = $this->listAccountUsersRequest($accountId, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WPEngineGenerated\Model\ListAccountUsers200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ListAccountUsers200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ListAccountUsers200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WPEngineGenerated\Model\BadRequestErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\BadRequestErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\BadRequestErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\ListAccountUsers200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ListAccountUsers200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\BadRequestErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listAccountUsersAsync
     *
     * List your account users
     *
     * @param  string $accountId ID of account (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccountUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAccountUsersAsync($accountId, $authorization = null, string $contentType = self::contentTypes['listAccountUsers'][0])
    {
        return $this->listAccountUsersAsyncWithHttpInfo($accountId, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listAccountUsersAsyncWithHttpInfo
     *
     * List your account users
     *
     * @param  string $accountId ID of account (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccountUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listAccountUsersAsyncWithHttpInfo($accountId, $authorization = null, string $contentType = self::contentTypes['listAccountUsers'][0])
    {
        $returnType = '\WPEngineGenerated\Model\ListAccountUsers200Response';
        $request = $this->listAccountUsersRequest($accountId, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listAccountUsers'
     *
     * @param  string $accountId ID of account (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listAccountUsers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listAccountUsersRequest($accountId, $authorization = null, string $contentType = self::contentTypes['listAccountUsers'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling listAccountUsers'
            );
        }



        $resourcePath = '/accounts/{account_id}/account_users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateAccountUser
     *
     * Update an account user
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  \WPEngineGenerated\Model\UpdateAccountUserRequest $body ##### Properties * roles -- **required** - The roles the user is allowed. The following roles are valid   * owner   * full   * full,billing   * partial   * partial,billing * install_ids - **optional** - Used with partial role selection. The ids of the installs the user will have access to. (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountUser'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\CreateAccountUser201Response|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse|\WPEngineGenerated\Model\InternalServerErrorResponse
     */
    public function updateAccountUser($accountId, $userId, $body, $authorization = null, string $contentType = self::contentTypes['updateAccountUser'][0])
    {
        list($response) = $this->updateAccountUserWithHttpInfo($accountId, $userId, $body, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation updateAccountUserWithHttpInfo
     *
     * Update an account user
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  \WPEngineGenerated\Model\UpdateAccountUserRequest $body ##### Properties * roles -- **required** - The roles the user is allowed. The following roles are valid   * owner   * full   * full,billing   * partial   * partial,billing * install_ids - **optional** - Used with partial role selection. The ids of the installs the user will have access to. (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountUser'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\CreateAccountUser201Response|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse|\WPEngineGenerated\Model\InternalServerErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateAccountUserWithHttpInfo($accountId, $userId, $body, $authorization = null, string $contentType = self::contentTypes['updateAccountUser'][0])
    {
        $request = $this->updateAccountUserRequest($accountId, $userId, $body, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WPEngineGenerated\Model\CreateAccountUser201Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\CreateAccountUser201Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\CreateAccountUser201Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WPEngineGenerated\Model\BadRequestErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\BadRequestErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\BadRequestErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ForbiddenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WPEngineGenerated\Model\NotFoundErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\NotFoundErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\NotFoundErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WPEngineGenerated\Model\InternalServerErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\InternalServerErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\InternalServerErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\CreateAccountUser201Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\CreateAccountUser201Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\BadRequestErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\NotFoundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\InternalServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateAccountUserAsync
     *
     * Update an account user
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  \WPEngineGenerated\Model\UpdateAccountUserRequest $body ##### Properties * roles -- **required** - The roles the user is allowed. The following roles are valid   * owner   * full   * full,billing   * partial   * partial,billing * install_ids - **optional** - Used with partial role selection. The ids of the installs the user will have access to. (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountUserAsync($accountId, $userId, $body, $authorization = null, string $contentType = self::contentTypes['updateAccountUser'][0])
    {
        return $this->updateAccountUserAsyncWithHttpInfo($accountId, $userId, $body, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateAccountUserAsyncWithHttpInfo
     *
     * Update an account user
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  \WPEngineGenerated\Model\UpdateAccountUserRequest $body ##### Properties * roles -- **required** - The roles the user is allowed. The following roles are valid   * owner   * full   * full,billing   * partial   * partial,billing * install_ids - **optional** - Used with partial role selection. The ids of the installs the user will have access to. (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateAccountUserAsyncWithHttpInfo($accountId, $userId, $body, $authorization = null, string $contentType = self::contentTypes['updateAccountUser'][0])
    {
        $returnType = '\WPEngineGenerated\Model\CreateAccountUser201Response';
        $request = $this->updateAccountUserRequest($accountId, $userId, $body, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateAccountUser'
     *
     * @param  string $accountId ID of account (required)
     * @param  string $userId ID of the user (required)
     * @param  \WPEngineGenerated\Model\UpdateAccountUserRequest $body ##### Properties * roles -- **required** - The roles the user is allowed. The following roles are valid   * owner   * full   * full,billing   * partial   * partial,billing * install_ids - **optional** - Used with partial role selection. The ids of the installs the user will have access to. (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateAccountUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateAccountUserRequest($accountId, $userId, $body, $authorization = null, string $contentType = self::contentTypes['updateAccountUser'][0])
    {

        // verify the required parameter 'accountId' is set
        if ($accountId === null || (is_array($accountId) && count($accountId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accountId when calling updateAccountUser'
            );
        }

        // verify the required parameter 'userId' is set
        if ($userId === null || (is_array($userId) && count($userId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userId when calling updateAccountUser'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateAccountUser'
            );
        }



        $resourcePath = '/accounts/{account_id}/account_users/{user_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($accountId !== null) {
            $resourcePath = str_replace(
                '{' . 'account_id' . '}',
                ObjectSerializer::toPathValue($accountId),
                $resourcePath
            );
        }
        // path params
        if ($userId !== null) {
            $resourcePath = str_replace(
                '{' . 'user_id' . '}',
                ObjectSerializer::toPathValue($userId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
