<?php
/**
 * InstallApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WPEngineGenerated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WP Engine API
 *
 * The API described in this document is subject to change.
 *
 * The version of the OpenAPI document: 1.6.7
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WPEngineGenerated\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WPEngineGenerated\ApiException;
use WPEngineGenerated\Configuration;
use WPEngineGenerated\HeaderSelector;
use WPEngineGenerated\ObjectSerializer;

/**
 * InstallApi Class Doc Comment
 *
 * @category Class
 * @package  WPEngineGenerated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InstallApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createInstall' => [
            'application/json',
        ],
        'deleteInstall' => [
            'application/json',
        ],
        'getInstall' => [
            'application/json',
        ],
        'listInstalls' => [
            'application/json',
        ],
        'updateInstall' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createInstall
     *
     * Create a new WordPress installation
     *
     * @param  \WPEngineGenerated\Model\CreateInstallRequest $body ##### Properties * name  - **required** - The name of the install * account_id - **required**  - The ID of the account that the install will belong to * site_id - **required for accounts with sites enabled** - The ID of the site that the install will belong to * environment - **required for accounts with sites enabled** - The site environment that the install will fill (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInstall'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\Installation|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse
     */
    public function createInstall($body, $authorization = null, string $contentType = self::contentTypes['createInstall'][0])
    {
        list($response) = $this->createInstallWithHttpInfo($body, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation createInstallWithHttpInfo
     *
     * Create a new WordPress installation
     *
     * @param  \WPEngineGenerated\Model\CreateInstallRequest $body ##### Properties * name  - **required** - The name of the install * account_id - **required**  - The ID of the account that the install will belong to * site_id - **required for accounts with sites enabled** - The ID of the site that the install will belong to * environment - **required for accounts with sites enabled** - The site environment that the install will fill (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInstall'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\Installation|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createInstallWithHttpInfo($body, $authorization = null, string $contentType = self::contentTypes['createInstall'][0])
    {
        $request = $this->createInstallRequest($body, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\WPEngineGenerated\Model\Installation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\Installation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\Installation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WPEngineGenerated\Model\BadRequestErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\BadRequestErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\BadRequestErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ForbiddenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\Installation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\Installation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\BadRequestErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createInstallAsync
     *
     * Create a new WordPress installation
     *
     * @param  \WPEngineGenerated\Model\CreateInstallRequest $body ##### Properties * name  - **required** - The name of the install * account_id - **required**  - The ID of the account that the install will belong to * site_id - **required for accounts with sites enabled** - The ID of the site that the install will belong to * environment - **required for accounts with sites enabled** - The site environment that the install will fill (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInstall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInstallAsync($body, $authorization = null, string $contentType = self::contentTypes['createInstall'][0])
    {
        return $this->createInstallAsyncWithHttpInfo($body, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createInstallAsyncWithHttpInfo
     *
     * Create a new WordPress installation
     *
     * @param  \WPEngineGenerated\Model\CreateInstallRequest $body ##### Properties * name  - **required** - The name of the install * account_id - **required**  - The ID of the account that the install will belong to * site_id - **required for accounts with sites enabled** - The ID of the site that the install will belong to * environment - **required for accounts with sites enabled** - The site environment that the install will fill (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInstall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createInstallAsyncWithHttpInfo($body, $authorization = null, string $contentType = self::contentTypes['createInstall'][0])
    {
        $returnType = '\WPEngineGenerated\Model\Installation';
        $request = $this->createInstallRequest($body, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createInstall'
     *
     * @param  \WPEngineGenerated\Model\CreateInstallRequest $body ##### Properties * name  - **required** - The name of the install * account_id - **required**  - The ID of the account that the install will belong to * site_id - **required for accounts with sites enabled** - The ID of the site that the install will belong to * environment - **required for accounts with sites enabled** - The site environment that the install will fill (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createInstall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createInstallRequest($body, $authorization = null, string $contentType = self::contentTypes['createInstall'][0])
    {

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createInstall'
            );
        }



        $resourcePath = '/installs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteInstall
     *
     * Delete an install by ID
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInstall'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteInstall($installId, $authorization = null, string $contentType = self::contentTypes['deleteInstall'][0])
    {
        $this->deleteInstallWithHttpInfo($installId, $authorization, $contentType);
    }

    /**
     * Operation deleteInstallWithHttpInfo
     *
     * Delete an install by ID
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInstall'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteInstallWithHttpInfo($installId, $authorization = null, string $contentType = self::contentTypes['deleteInstall'][0])
    {
        $request = $this->deleteInstallRequest($installId, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\NotFoundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteInstallAsync
     *
     * Delete an install by ID
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInstall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInstallAsync($installId, $authorization = null, string $contentType = self::contentTypes['deleteInstall'][0])
    {
        return $this->deleteInstallAsyncWithHttpInfo($installId, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteInstallAsyncWithHttpInfo
     *
     * Delete an install by ID
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInstall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteInstallAsyncWithHttpInfo($installId, $authorization = null, string $contentType = self::contentTypes['deleteInstall'][0])
    {
        $returnType = '';
        $request = $this->deleteInstallRequest($installId, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteInstall'
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteInstall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteInstallRequest($installId, $authorization = null, string $contentType = self::contentTypes['deleteInstall'][0])
    {

        // verify the required parameter 'installId' is set
        if ($installId === null || (is_array($installId) && count($installId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $installId when calling deleteInstall'
            );
        }



        $resourcePath = '/installs/{install_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($installId !== null) {
            $resourcePath = str_replace(
                '{' . 'install_id' . '}',
                ObjectSerializer::toPathValue($installId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInstall
     *
     * Get an install by ID
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstall'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\Installation|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse
     */
    public function getInstall($installId, $authorization = null, string $contentType = self::contentTypes['getInstall'][0])
    {
        list($response) = $this->getInstallWithHttpInfo($installId, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation getInstallWithHttpInfo
     *
     * Get an install by ID
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstall'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\Installation|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInstallWithHttpInfo($installId, $authorization = null, string $contentType = self::contentTypes['getInstall'][0])
    {
        $request = $this->getInstallRequest($installId, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WPEngineGenerated\Model\Installation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\Installation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\Installation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WPEngineGenerated\Model\NotFoundErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\NotFoundErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\NotFoundErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\Installation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\Installation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\NotFoundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInstallAsync
     *
     * Get an install by ID
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstallAsync($installId, $authorization = null, string $contentType = self::contentTypes['getInstall'][0])
    {
        return $this->getInstallAsyncWithHttpInfo($installId, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInstallAsyncWithHttpInfo
     *
     * Get an install by ID
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstallAsyncWithHttpInfo($installId, $authorization = null, string $contentType = self::contentTypes['getInstall'][0])
    {
        $returnType = '\WPEngineGenerated\Model\Installation';
        $request = $this->getInstallRequest($installId, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInstall'
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInstallRequest($installId, $authorization = null, string $contentType = self::contentTypes['getInstall'][0])
    {

        // verify the required parameter 'installId' is set
        if ($installId === null || (is_array($installId) && count($installId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $installId when calling getInstall'
            );
        }



        $resourcePath = '/installs/{install_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($installId !== null) {
            $resourcePath = str_replace(
                '{' . 'install_id' . '}',
                ObjectSerializer::toPathValue($installId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listInstalls
     *
     * List your WordPress installations
     *
     * @param  string $authorization authorization (optional)
     * @param  int $limit (Optional) The number of records to return (optional, default to 100)
     * @param  int $offset (Optional) The first record of the result set to be retrieved (optional, default to 0)
     * @param  string $accountId (Optional) The uuid of an account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInstalls'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\ListInstalls200Response|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse
     */
    public function listInstalls($authorization = null, $limit = 100, $offset = 0, $accountId = null, string $contentType = self::contentTypes['listInstalls'][0])
    {
        list($response) = $this->listInstallsWithHttpInfo($authorization, $limit, $offset, $accountId, $contentType);
        return $response;
    }

    /**
     * Operation listInstallsWithHttpInfo
     *
     * List your WordPress installations
     *
     * @param  string $authorization (optional)
     * @param  int $limit (Optional) The number of records to return (optional, default to 100)
     * @param  int $offset (Optional) The first record of the result set to be retrieved (optional, default to 0)
     * @param  string $accountId (Optional) The uuid of an account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInstalls'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\ListInstalls200Response|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listInstallsWithHttpInfo($authorization = null, $limit = 100, $offset = 0, $accountId = null, string $contentType = self::contentTypes['listInstalls'][0])
    {
        $request = $this->listInstallsRequest($authorization, $limit, $offset, $accountId, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WPEngineGenerated\Model\ListInstalls200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ListInstalls200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ListInstalls200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WPEngineGenerated\Model\BadRequestErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\BadRequestErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\BadRequestErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\ListInstalls200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ListInstalls200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\BadRequestErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listInstallsAsync
     *
     * List your WordPress installations
     *
     * @param  string $authorization (optional)
     * @param  int $limit (Optional) The number of records to return (optional, default to 100)
     * @param  int $offset (Optional) The first record of the result set to be retrieved (optional, default to 0)
     * @param  string $accountId (Optional) The uuid of an account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInstalls'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInstallsAsync($authorization = null, $limit = 100, $offset = 0, $accountId = null, string $contentType = self::contentTypes['listInstalls'][0])
    {
        return $this->listInstallsAsyncWithHttpInfo($authorization, $limit, $offset, $accountId, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listInstallsAsyncWithHttpInfo
     *
     * List your WordPress installations
     *
     * @param  string $authorization (optional)
     * @param  int $limit (Optional) The number of records to return (optional, default to 100)
     * @param  int $offset (Optional) The first record of the result set to be retrieved (optional, default to 0)
     * @param  string $accountId (Optional) The uuid of an account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInstalls'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listInstallsAsyncWithHttpInfo($authorization = null, $limit = 100, $offset = 0, $accountId = null, string $contentType = self::contentTypes['listInstalls'][0])
    {
        $returnType = '\WPEngineGenerated\Model\ListInstalls200Response';
        $request = $this->listInstallsRequest($authorization, $limit, $offset, $accountId, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listInstalls'
     *
     * @param  string $authorization (optional)
     * @param  int $limit (Optional) The number of records to return (optional, default to 100)
     * @param  int $offset (Optional) The first record of the result set to be retrieved (optional, default to 0)
     * @param  string $accountId (Optional) The uuid of an account (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listInstalls'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listInstallsRequest($authorization = null, $limit = 100, $offset = 0, $accountId = null, string $contentType = self::contentTypes['listInstalls'][0])
    {


        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling InstallApi.listInstalls, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling InstallApi.listInstalls, must be bigger than or equal to 0.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling InstallApi.listInstalls, must be bigger than or equal to 0.');
        }
        


        $resourcePath = '/installs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $accountId,
            'account_id', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }



        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateInstall
     *
     * Update a WordPress installation
     *
     * @param  string $installId The install ID (required)
     * @param  \WPEngineGenerated\Model\UpdateInstallRequest $body ##### Properties * site_id - **optional** - The ID of the site that the install will belong to *(For accounts with sites enabled)* * environment - **optional** - The site environment that the install will fill *(For accounts with sites enabled)* (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInstall'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\Installation|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse
     */
    public function updateInstall($installId, $body, $authorization = null, string $contentType = self::contentTypes['updateInstall'][0])
    {
        list($response) = $this->updateInstallWithHttpInfo($installId, $body, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation updateInstallWithHttpInfo
     *
     * Update a WordPress installation
     *
     * @param  string $installId The install ID (required)
     * @param  \WPEngineGenerated\Model\UpdateInstallRequest $body ##### Properties * site_id - **optional** - The ID of the site that the install will belong to *(For accounts with sites enabled)* * environment - **optional** - The site environment that the install will fill *(For accounts with sites enabled)* (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInstall'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\Installation|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateInstallWithHttpInfo($installId, $body, $authorization = null, string $contentType = self::contentTypes['updateInstall'][0])
    {
        $request = $this->updateInstallRequest($installId, $body, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WPEngineGenerated\Model\Installation' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\Installation' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\Installation', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WPEngineGenerated\Model\BadRequestErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\BadRequestErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\BadRequestErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ForbiddenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\Installation';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\Installation',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\BadRequestErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateInstallAsync
     *
     * Update a WordPress installation
     *
     * @param  string $installId The install ID (required)
     * @param  \WPEngineGenerated\Model\UpdateInstallRequest $body ##### Properties * site_id - **optional** - The ID of the site that the install will belong to *(For accounts with sites enabled)* * environment - **optional** - The site environment that the install will fill *(For accounts with sites enabled)* (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInstall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInstallAsync($installId, $body, $authorization = null, string $contentType = self::contentTypes['updateInstall'][0])
    {
        return $this->updateInstallAsyncWithHttpInfo($installId, $body, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateInstallAsyncWithHttpInfo
     *
     * Update a WordPress installation
     *
     * @param  string $installId The install ID (required)
     * @param  \WPEngineGenerated\Model\UpdateInstallRequest $body ##### Properties * site_id - **optional** - The ID of the site that the install will belong to *(For accounts with sites enabled)* * environment - **optional** - The site environment that the install will fill *(For accounts with sites enabled)* (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInstall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateInstallAsyncWithHttpInfo($installId, $body, $authorization = null, string $contentType = self::contentTypes['updateInstall'][0])
    {
        $returnType = '\WPEngineGenerated\Model\Installation';
        $request = $this->updateInstallRequest($installId, $body, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateInstall'
     *
     * @param  string $installId The install ID (required)
     * @param  \WPEngineGenerated\Model\UpdateInstallRequest $body ##### Properties * site_id - **optional** - The ID of the site that the install will belong to *(For accounts with sites enabled)* * environment - **optional** - The site environment that the install will fill *(For accounts with sites enabled)* (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateInstall'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateInstallRequest($installId, $body, $authorization = null, string $contentType = self::contentTypes['updateInstall'][0])
    {

        // verify the required parameter 'installId' is set
        if ($installId === null || (is_array($installId) && count($installId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $installId when calling updateInstall'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateInstall'
            );
        }



        $resourcePath = '/installs/{install_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($installId !== null) {
            $resourcePath = str_replace(
                '{' . 'install_id' . '}',
                ObjectSerializer::toPathValue($installId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
