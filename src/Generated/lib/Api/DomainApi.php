<?php
/**
 * DomainApi
 * PHP version 7.4
 *
 * @category Class
 * @package  WPEngineGenerated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * WP Engine API
 *
 * The API described in this document is subject to change.
 *
 * The version of the OpenAPI document: 1.6.7
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.6.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace WPEngineGenerated\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use WPEngineGenerated\ApiException;
use WPEngineGenerated\Configuration;
use WPEngineGenerated\HeaderSelector;
use WPEngineGenerated\ObjectSerializer;

/**
 * DomainApi Class Doc Comment
 *
 * @category Class
 * @package  WPEngineGenerated
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DomainApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'checkStatus' => [
            'application/json',
        ],
        'createBulkDomains' => [
            'application/json',
        ],
        'createDomain' => [
            'application/json',
        ],
        'deleteDomain' => [
            'application/json',
        ],
        'getDomain' => [
            'application/json',
        ],
        'listDomains' => [
            'application/json',
        ],
        'updateDomain' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkStatus
     *
     * Check the status of a domain
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkStatus'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\Domain|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse|\WPEngineGenerated\Model\CheckStatus429Response|\WPEngineGenerated\Model\InternalServerErrorResponse
     */
    public function checkStatus($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['checkStatus'][0])
    {
        list($response) = $this->checkStatusWithHttpInfo($installId, $domainId, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation checkStatusWithHttpInfo
     *
     * Check the status of a domain
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkStatus'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\Domain|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse|\WPEngineGenerated\Model\CheckStatus429Response|\WPEngineGenerated\Model\InternalServerErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkStatusWithHttpInfo($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['checkStatus'][0])
    {
        $request = $this->checkStatusRequest($installId, $domainId, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WPEngineGenerated\Model\Domain' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\Domain' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\Domain', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ForbiddenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WPEngineGenerated\Model\NotFoundErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\NotFoundErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\NotFoundErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\WPEngineGenerated\Model\CheckStatus429Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\CheckStatus429Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\CheckStatus429Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\WPEngineGenerated\Model\InternalServerErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\InternalServerErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\InternalServerErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\Domain';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\Domain',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\NotFoundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\CheckStatus429Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\InternalServerErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkStatusAsync
     *
     * Check the status of a domain
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkStatusAsync($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['checkStatus'][0])
    {
        return $this->checkStatusAsyncWithHttpInfo($installId, $domainId, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkStatusAsyncWithHttpInfo
     *
     * Check the status of a domain
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkStatusAsyncWithHttpInfo($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['checkStatus'][0])
    {
        $returnType = '\WPEngineGenerated\Model\Domain';
        $request = $this->checkStatusRequest($installId, $domainId, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkStatus'
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['checkStatus'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function checkStatusRequest($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['checkStatus'][0])
    {

        // verify the required parameter 'installId' is set
        if ($installId === null || (is_array($installId) && count($installId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $installId when calling checkStatus'
            );
        }

        // verify the required parameter 'domainId' is set
        if ($domainId === null || (is_array($domainId) && count($domainId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domainId when calling checkStatus'
            );
        }



        $resourcePath = '/installs/{install_id}/domains/{domain_id}/check_status';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($installId !== null) {
            $resourcePath = str_replace(
                '{' . 'install_id' . '}',
                ObjectSerializer::toPathValue($installId),
                $resourcePath
            );
        }
        // path params
        if ($domainId !== null) {
            $resourcePath = str_replace(
                '{' . 'domain_id' . '}',
                ObjectSerializer::toPathValue($domainId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createBulkDomains
     *
     * Add multiple domains and redirects to an existing install
     *
     * @param  string $installId ID of install (required)
     * @param  \WPEngineGenerated\Model\CreateBulkDomainsRequest $body ##### Properties * domains - **required** - array of domains to be created, min size: 1, max size: 20   * items:     * name  - **required** - The name of the new domain (or redirect)     * redirect_to - **optional**  - Name of the domain to set redirect to (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBulkDomains'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\DomainOrRedirect|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse
     */
    public function createBulkDomains($installId, $body, $authorization = null, string $contentType = self::contentTypes['createBulkDomains'][0])
    {
        list($response) = $this->createBulkDomainsWithHttpInfo($installId, $body, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation createBulkDomainsWithHttpInfo
     *
     * Add multiple domains and redirects to an existing install
     *
     * @param  string $installId ID of install (required)
     * @param  \WPEngineGenerated\Model\CreateBulkDomainsRequest $body ##### Properties * domains - **required** - array of domains to be created, min size: 1, max size: 20   * items:     * name  - **required** - The name of the new domain (or redirect)     * redirect_to - **optional**  - Name of the domain to set redirect to (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBulkDomains'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\DomainOrRedirect|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createBulkDomainsWithHttpInfo($installId, $body, $authorization = null, string $contentType = self::contentTypes['createBulkDomains'][0])
    {
        $request = $this->createBulkDomainsRequest($installId, $body, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\WPEngineGenerated\Model\DomainOrRedirect' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\DomainOrRedirect' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\DomainOrRedirect', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WPEngineGenerated\Model\BadRequestErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\BadRequestErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\BadRequestErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ForbiddenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\DomainOrRedirect';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\DomainOrRedirect',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\BadRequestErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createBulkDomainsAsync
     *
     * Add multiple domains and redirects to an existing install
     *
     * @param  string $installId ID of install (required)
     * @param  \WPEngineGenerated\Model\CreateBulkDomainsRequest $body ##### Properties * domains - **required** - array of domains to be created, min size: 1, max size: 20   * items:     * name  - **required** - The name of the new domain (or redirect)     * redirect_to - **optional**  - Name of the domain to set redirect to (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBulkDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBulkDomainsAsync($installId, $body, $authorization = null, string $contentType = self::contentTypes['createBulkDomains'][0])
    {
        return $this->createBulkDomainsAsyncWithHttpInfo($installId, $body, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createBulkDomainsAsyncWithHttpInfo
     *
     * Add multiple domains and redirects to an existing install
     *
     * @param  string $installId ID of install (required)
     * @param  \WPEngineGenerated\Model\CreateBulkDomainsRequest $body ##### Properties * domains - **required** - array of domains to be created, min size: 1, max size: 20   * items:     * name  - **required** - The name of the new domain (or redirect)     * redirect_to - **optional**  - Name of the domain to set redirect to (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBulkDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createBulkDomainsAsyncWithHttpInfo($installId, $body, $authorization = null, string $contentType = self::contentTypes['createBulkDomains'][0])
    {
        $returnType = '\WPEngineGenerated\Model\DomainOrRedirect';
        $request = $this->createBulkDomainsRequest($installId, $body, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createBulkDomains'
     *
     * @param  string $installId ID of install (required)
     * @param  \WPEngineGenerated\Model\CreateBulkDomainsRequest $body ##### Properties * domains - **required** - array of domains to be created, min size: 1, max size: 20   * items:     * name  - **required** - The name of the new domain (or redirect)     * redirect_to - **optional**  - Name of the domain to set redirect to (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createBulkDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createBulkDomainsRequest($installId, $body, $authorization = null, string $contentType = self::contentTypes['createBulkDomains'][0])
    {

        // verify the required parameter 'installId' is set
        if ($installId === null || (is_array($installId) && count($installId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $installId when calling createBulkDomains'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createBulkDomains'
            );
        }



        $resourcePath = '/installs/{install_id}/domains/bulk';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($installId !== null) {
            $resourcePath = str_replace(
                '{' . 'install_id' . '}',
                ObjectSerializer::toPathValue($installId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createDomain
     *
     * Add a new domain or redirect to an existing install
     *
     * @param  string $installId ID of install (required)
     * @param  \WPEngineGenerated\Model\CreateDomainRequest $body ##### Properties * name  - **required** - The name of the new domain * primary - **optional**  - Sets the domain as the primary domain on the install * redirect_to - **optional** - ID of a domain to create a redirect to (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDomain'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\Domain|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse
     */
    public function createDomain($installId, $body, $authorization = null, string $contentType = self::contentTypes['createDomain'][0])
    {
        list($response) = $this->createDomainWithHttpInfo($installId, $body, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation createDomainWithHttpInfo
     *
     * Add a new domain or redirect to an existing install
     *
     * @param  string $installId ID of install (required)
     * @param  \WPEngineGenerated\Model\CreateDomainRequest $body ##### Properties * name  - **required** - The name of the new domain * primary - **optional**  - Sets the domain as the primary domain on the install * redirect_to - **optional** - ID of a domain to create a redirect to (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDomain'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\Domain|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function createDomainWithHttpInfo($installId, $body, $authorization = null, string $contentType = self::contentTypes['createDomain'][0])
    {
        $request = $this->createDomainRequest($installId, $body, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\WPEngineGenerated\Model\Domain' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\Domain' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\Domain', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WPEngineGenerated\Model\BadRequestErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\BadRequestErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\BadRequestErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ForbiddenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\Domain';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\Domain',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\BadRequestErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createDomainAsync
     *
     * Add a new domain or redirect to an existing install
     *
     * @param  string $installId ID of install (required)
     * @param  \WPEngineGenerated\Model\CreateDomainRequest $body ##### Properties * name  - **required** - The name of the new domain * primary - **optional**  - Sets the domain as the primary domain on the install * redirect_to - **optional** - ID of a domain to create a redirect to (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDomainAsync($installId, $body, $authorization = null, string $contentType = self::contentTypes['createDomain'][0])
    {
        return $this->createDomainAsyncWithHttpInfo($installId, $body, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createDomainAsyncWithHttpInfo
     *
     * Add a new domain or redirect to an existing install
     *
     * @param  string $installId ID of install (required)
     * @param  \WPEngineGenerated\Model\CreateDomainRequest $body ##### Properties * name  - **required** - The name of the new domain * primary - **optional**  - Sets the domain as the primary domain on the install * redirect_to - **optional** - ID of a domain to create a redirect to (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createDomainAsyncWithHttpInfo($installId, $body, $authorization = null, string $contentType = self::contentTypes['createDomain'][0])
    {
        $returnType = '\WPEngineGenerated\Model\Domain';
        $request = $this->createDomainRequest($installId, $body, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createDomain'
     *
     * @param  string $installId ID of install (required)
     * @param  \WPEngineGenerated\Model\CreateDomainRequest $body ##### Properties * name  - **required** - The name of the new domain * primary - **optional**  - Sets the domain as the primary domain on the install * redirect_to - **optional** - ID of a domain to create a redirect to (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createDomainRequest($installId, $body, $authorization = null, string $contentType = self::contentTypes['createDomain'][0])
    {

        // verify the required parameter 'installId' is set
        if ($installId === null || (is_array($installId) && count($installId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $installId when calling createDomain'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createDomain'
            );
        }



        $resourcePath = '/installs/{install_id}/domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($installId !== null) {
            $resourcePath = str_replace(
                '{' . 'install_id' . '}',
                ObjectSerializer::toPathValue($installId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteDomain
     *
     * Delete a specific domain for an install
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomain'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteDomain($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['deleteDomain'][0])
    {
        $this->deleteDomainWithHttpInfo($installId, $domainId, $authorization, $contentType);
    }

    /**
     * Operation deleteDomainWithHttpInfo
     *
     * Delete a specific domain for an install
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomain'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteDomainWithHttpInfo($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['deleteDomain'][0])
    {
        $request = $this->deleteDomainRequest($installId, $domainId, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\BadRequestErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\NotFoundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteDomainAsync
     *
     * Delete a specific domain for an install
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDomainAsync($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['deleteDomain'][0])
    {
        return $this->deleteDomainAsyncWithHttpInfo($installId, $domainId, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteDomainAsyncWithHttpInfo
     *
     * Delete a specific domain for an install
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteDomainAsyncWithHttpInfo($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['deleteDomain'][0])
    {
        $returnType = '';
        $request = $this->deleteDomainRequest($installId, $domainId, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteDomain'
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteDomainRequest($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['deleteDomain'][0])
    {

        // verify the required parameter 'installId' is set
        if ($installId === null || (is_array($installId) && count($installId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $installId when calling deleteDomain'
            );
        }

        // verify the required parameter 'domainId' is set
        if ($domainId === null || (is_array($domainId) && count($domainId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domainId when calling deleteDomain'
            );
        }



        $resourcePath = '/installs/{install_id}/domains/{domain_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($installId !== null) {
            $resourcePath = str_replace(
                '{' . 'install_id' . '}',
                ObjectSerializer::toPathValue($installId),
                $resourcePath
            );
        }
        // path params
        if ($domainId !== null) {
            $resourcePath = str_replace(
                '{' . 'domain_id' . '}',
                ObjectSerializer::toPathValue($domainId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getDomain
     *
     * Get a specific domain for an install
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomain'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\Domain|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse
     */
    public function getDomain($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['getDomain'][0])
    {
        list($response) = $this->getDomainWithHttpInfo($installId, $domainId, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation getDomainWithHttpInfo
     *
     * Get a specific domain for an install
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomain'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\Domain|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getDomainWithHttpInfo($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['getDomain'][0])
    {
        $request = $this->getDomainRequest($installId, $domainId, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WPEngineGenerated\Model\Domain' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\Domain' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\Domain', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ForbiddenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WPEngineGenerated\Model\NotFoundErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\NotFoundErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\NotFoundErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\Domain';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\Domain',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\NotFoundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getDomainAsync
     *
     * Get a specific domain for an install
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDomainAsync($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['getDomain'][0])
    {
        return $this->getDomainAsyncWithHttpInfo($installId, $domainId, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getDomainAsyncWithHttpInfo
     *
     * Get a specific domain for an install
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getDomainAsyncWithHttpInfo($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['getDomain'][0])
    {
        $returnType = '\WPEngineGenerated\Model\Domain';
        $request = $this->getDomainRequest($installId, $domainId, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getDomain'
     *
     * @param  string $installId ID of install (required)
     * @param  string $domainId ID of domain (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getDomainRequest($installId, $domainId, $authorization = null, string $contentType = self::contentTypes['getDomain'][0])
    {

        // verify the required parameter 'installId' is set
        if ($installId === null || (is_array($installId) && count($installId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $installId when calling getDomain'
            );
        }

        // verify the required parameter 'domainId' is set
        if ($domainId === null || (is_array($domainId) && count($domainId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domainId when calling getDomain'
            );
        }



        $resourcePath = '/installs/{install_id}/domains/{domain_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($installId !== null) {
            $resourcePath = str_replace(
                '{' . 'install_id' . '}',
                ObjectSerializer::toPathValue($installId),
                $resourcePath
            );
        }
        // path params
        if ($domainId !== null) {
            $resourcePath = str_replace(
                '{' . 'domain_id' . '}',
                ObjectSerializer::toPathValue($domainId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listDomains
     *
     * Get the domains for an install by install id
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization authorization (optional)
     * @param  int $limit (Optional) The number of records to return (optional, default to 100)
     * @param  int $offset (Optional) The first record of the result set to be retrieved (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDomains'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\ListDomains200Response|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse
     */
    public function listDomains($installId, $authorization = null, $limit = 100, $offset = 0, string $contentType = self::contentTypes['listDomains'][0])
    {
        list($response) = $this->listDomainsWithHttpInfo($installId, $authorization, $limit, $offset, $contentType);
        return $response;
    }

    /**
     * Operation listDomainsWithHttpInfo
     *
     * Get the domains for an install by install id
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization (optional)
     * @param  int $limit (Optional) The number of records to return (optional, default to 100)
     * @param  int $offset (Optional) The first record of the result set to be retrieved (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDomains'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\ListDomains200Response|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listDomainsWithHttpInfo($installId, $authorization = null, $limit = 100, $offset = 0, string $contentType = self::contentTypes['listDomains'][0])
    {
        $request = $this->listDomainsRequest($installId, $authorization, $limit, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WPEngineGenerated\Model\ListDomains200Response' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ListDomains200Response' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ListDomains200Response', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ForbiddenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WPEngineGenerated\Model\NotFoundErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\NotFoundErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\NotFoundErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\ListDomains200Response';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ListDomains200Response',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\NotFoundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listDomainsAsync
     *
     * Get the domains for an install by install id
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization (optional)
     * @param  int $limit (Optional) The number of records to return (optional, default to 100)
     * @param  int $offset (Optional) The first record of the result set to be retrieved (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDomainsAsync($installId, $authorization = null, $limit = 100, $offset = 0, string $contentType = self::contentTypes['listDomains'][0])
    {
        return $this->listDomainsAsyncWithHttpInfo($installId, $authorization, $limit, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listDomainsAsyncWithHttpInfo
     *
     * Get the domains for an install by install id
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization (optional)
     * @param  int $limit (Optional) The number of records to return (optional, default to 100)
     * @param  int $offset (Optional) The first record of the result set to be retrieved (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listDomainsAsyncWithHttpInfo($installId, $authorization = null, $limit = 100, $offset = 0, string $contentType = self::contentTypes['listDomains'][0])
    {
        $returnType = '\WPEngineGenerated\Model\ListDomains200Response';
        $request = $this->listDomainsRequest($installId, $authorization, $limit, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listDomains'
     *
     * @param  string $installId ID of install (required)
     * @param  string $authorization (optional)
     * @param  int $limit (Optional) The number of records to return (optional, default to 100)
     * @param  int $offset (Optional) The first record of the result set to be retrieved (optional, default to 0)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listDomains'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listDomainsRequest($installId, $authorization = null, $limit = 100, $offset = 0, string $contentType = self::contentTypes['listDomains'][0])
    {

        // verify the required parameter 'installId' is set
        if ($installId === null || (is_array($installId) && count($installId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $installId when calling listDomains'
            );
        }


        if ($limit !== null && $limit > 100) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DomainApi.listDomains, must be smaller than or equal to 100.');
        }
        if ($limit !== null && $limit < 0) {
            throw new \InvalidArgumentException('invalid value for "$limit" when calling DomainApi.listDomains, must be bigger than or equal to 0.');
        }
        
        if ($offset !== null && $offset < 0) {
            throw new \InvalidArgumentException('invalid value for "$offset" when calling DomainApi.listDomains, must be bigger than or equal to 0.');
        }
        

        $resourcePath = '/installs/{install_id}/domains';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $limit,
            'limit', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($installId !== null) {
            $resourcePath = str_replace(
                '{' . 'install_id' . '}',
                ObjectSerializer::toPathValue($installId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateDomain
     *
     * Set an existing domain as primary
     *
     * @param  string $installId The install ID (required)
     * @param  string $domainId ID of domain (required)
     * @param  \WPEngineGenerated\Model\UpdateDomainRequest $body ##### Properties * primary - **optional** - Boolean value to make the domain primary on the given install * redirect_to - **optional** - The UUID of another Domain record, or \&quot;nil\&quot; to remove an existing redirect. (required)
     * @param  string $authorization authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDomain'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \WPEngineGenerated\Model\Domain|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse
     */
    public function updateDomain($installId, $domainId, $body, $authorization = null, string $contentType = self::contentTypes['updateDomain'][0])
    {
        list($response) = $this->updateDomainWithHttpInfo($installId, $domainId, $body, $authorization, $contentType);
        return $response;
    }

    /**
     * Operation updateDomainWithHttpInfo
     *
     * Set an existing domain as primary
     *
     * @param  string $installId The install ID (required)
     * @param  string $domainId ID of domain (required)
     * @param  \WPEngineGenerated\Model\UpdateDomainRequest $body ##### Properties * primary - **optional** - Boolean value to make the domain primary on the given install * redirect_to - **optional** - The UUID of another Domain record, or \&quot;nil\&quot; to remove an existing redirect. (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDomain'] to see the possible values for this operation
     *
     * @throws \WPEngineGenerated\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \WPEngineGenerated\Model\Domain|\WPEngineGenerated\Model\BadRequestErrorResponse|\WPEngineGenerated\Model\AuthenticationErrorResponse|\WPEngineGenerated\Model\ForbiddenErrorResponse|\WPEngineGenerated\Model\NotFoundErrorResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateDomainWithHttpInfo($installId, $domainId, $body, $authorization = null, string $contentType = self::contentTypes['updateDomain'][0])
    {
        $request = $this->updateDomainRequest($installId, $domainId, $body, $authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\WPEngineGenerated\Model\Domain' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\Domain' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\Domain', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\WPEngineGenerated\Model\BadRequestErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\BadRequestErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\BadRequestErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\AuthenticationErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\AuthenticationErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\ForbiddenErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\ForbiddenErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\WPEngineGenerated\Model\NotFoundErrorResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\WPEngineGenerated\Model\NotFoundErrorResponse' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\WPEngineGenerated\Model\NotFoundErrorResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\WPEngineGenerated\Model\Domain';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\Domain',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\BadRequestErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\AuthenticationErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\ForbiddenErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\WPEngineGenerated\Model\NotFoundErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateDomainAsync
     *
     * Set an existing domain as primary
     *
     * @param  string $installId The install ID (required)
     * @param  string $domainId ID of domain (required)
     * @param  \WPEngineGenerated\Model\UpdateDomainRequest $body ##### Properties * primary - **optional** - Boolean value to make the domain primary on the given install * redirect_to - **optional** - The UUID of another Domain record, or \&quot;nil\&quot; to remove an existing redirect. (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDomainAsync($installId, $domainId, $body, $authorization = null, string $contentType = self::contentTypes['updateDomain'][0])
    {
        return $this->updateDomainAsyncWithHttpInfo($installId, $domainId, $body, $authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateDomainAsyncWithHttpInfo
     *
     * Set an existing domain as primary
     *
     * @param  string $installId The install ID (required)
     * @param  string $domainId ID of domain (required)
     * @param  \WPEngineGenerated\Model\UpdateDomainRequest $body ##### Properties * primary - **optional** - Boolean value to make the domain primary on the given install * redirect_to - **optional** - The UUID of another Domain record, or \&quot;nil\&quot; to remove an existing redirect. (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateDomainAsyncWithHttpInfo($installId, $domainId, $body, $authorization = null, string $contentType = self::contentTypes['updateDomain'][0])
    {
        $returnType = '\WPEngineGenerated\Model\Domain';
        $request = $this->updateDomainRequest($installId, $domainId, $body, $authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateDomain'
     *
     * @param  string $installId The install ID (required)
     * @param  string $domainId ID of domain (required)
     * @param  \WPEngineGenerated\Model\UpdateDomainRequest $body ##### Properties * primary - **optional** - Boolean value to make the domain primary on the given install * redirect_to - **optional** - The UUID of another Domain record, or \&quot;nil\&quot; to remove an existing redirect. (required)
     * @param  string $authorization (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updateDomain'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updateDomainRequest($installId, $domainId, $body, $authorization = null, string $contentType = self::contentTypes['updateDomain'][0])
    {

        // verify the required parameter 'installId' is set
        if ($installId === null || (is_array($installId) && count($installId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $installId when calling updateDomain'
            );
        }

        // verify the required parameter 'domainId' is set
        if ($domainId === null || (is_array($domainId) && count($domainId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $domainId when calling updateDomain'
            );
        }

        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateDomain'
            );
        }



        $resourcePath = '/installs/{install_id}/domains/{domain_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($installId !== null) {
            $resourcePath = str_replace(
                '{' . 'install_id' . '}',
                ObjectSerializer::toPathValue($installId),
                $resourcePath
            );
        }
        // path params
        if ($domainId !== null) {
            $resourcePath = str_replace(
                '{' . 'domain_id' . '}',
                ObjectSerializer::toPathValue($domainId),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PATCH',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
